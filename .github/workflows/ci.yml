# .github/workflows/ci.yml - Versão simplificada para primeiro teste
name: CI

# Define quando este workflow deve ser executado
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Variáveis de ambiente
env:
  NODE_VERSION: '20.x'
  PORT: 3000
  BASE_URL: 'http://localhost:3000'
  NODE_ENV: 'test'

jobs:
  test-and-build:
    name: 'Test & Build'
    runs-on: ubuntu-latest

    # Configuração do PostgreSQL para testes
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Checkout do código
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      # Setup do Node.js
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Instalação das dependências
      - name: 'Install Dependencies'
        run: npm ci

      # Verificação de formatação
      - name: 'Check Code Formatting'
        run: npm run format -- --check

      # Execução do linter
      - name: 'Run ESLint'
        run: npm run lint

      # Geração do cliente Prisma
      - name: 'Generate Prisma Client'
        run: npm run prisma:generate

      # Configuração do banco de dados de teste
      - name: 'Setup Test Database'
        run: npm run prisma:push
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/testdb'

      # Execução dos testes unitários
      - name: 'Run Unit Tests'
        run: npm run test
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/testdb'
          JWT_SECRET: 'test-jwt-secret-for-ci'
          PORT: ${{ env.PORT }}
          BASE_URL: ${{ env.BASE_URL }}

      # Build da aplicação
      - name: 'Build Application'
        run: npm run build

    # Opcional: Execução dos testes com coverage (comentado para simplificar)
    # - name: 'Run Tests with Coverage'
    #   run: npm run test:cov
    #   env:
    #     DATABASE_URL: 'postgresql://test:test@localhost:5432/testdb'
    #     JWT_SECRET: 'test-jwt-secret-for-ci'
